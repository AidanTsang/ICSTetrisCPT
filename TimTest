import pygame
import random
import pygame.gfxdraw
pygame.init()
size = (500, 600)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Test4.0")

Black = (0, 0, 0)
White = (255, 255, 255)
Green = (0, 255, 0)
Red = (255, 0, 0)
Blue = (0, 0, 255)
Purple = (128, 0, 128)
Orange = (255, 165, 0)
Yellow = (255, 255, 0)
LightBlue = (0, 255, 255)

class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.shape = self.rand_shape()
        self.image = self.get_shape()
        self.rect = self.image.get_rect()
        self.walls = None
        self.change_x = 0
        self.change_y = 0

    def rand_shape(self):
        num = random.randrange(7)
        if num == 0:
            return "Shape_S"
        elif num == 1:
            return "Shape_Z"
        elif num == 2:
            return "Shape_Square"
        elif num == 3:
            return "Shape_I"
        elif num == 4:
            return "Shape_L"
        elif num == 5:
            return "Shape_RevL"
        elif num == 6:
            return "Shape_T"

    def get_shape(self):
        if self.shape == "Shape_S":
            self.width, self.height = 75, 50
            Shape_S = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_S,((0, 25), (0, 50), (50, 50), (50, 25), (75, 25), (75, 0), (25, 0), (25, 25)),Green)
            return Shape_S
        elif self.shape == "Shape_Z":
            self.width, self.height = 75, 50
            Shape_Z = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_Z,((75, 25), (75, 50), (25, 50), (25, 25), (0, 25), (0, 0), (50, 0), (50, 25)),Red)
            return Shape_Z
        elif self.shape == "Shape_Square":
            self.width, self.height = 50, 50
            Shape_Square = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_Square, ((0, 0), (0, 50), (50, 50), (50, 0)), Yellow)
            return Shape_Square
        elif self.shape == "Shape_I":
            self.width, self.height = 100, 25
            Shape_I = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_I, ((0, 0), (0, 25), (100, 25), (100, 0)), LightBlue)
            return Shape_I
        elif self.shape == "Shape_L":
            self.width, self.height = 50, 75
            Shape_L = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_L, ((0, 0), (25, 0), (25, 50), (50, 50), (50, 75), (0, 75)), Blue)
            return Shape_L
        elif self.shape == "Shape_RevL":
            self.width, self.height = 50, 75
            Shape_RevL = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_RevL, ((25, 0), (50, 0), (50, 75), (0, 75), (0, 50), (25, 50)), Orange)
            return Shape_RevL
        elif self.shape == "Shape_T":
            self.width, self.height = 75, 50
            Shape_T = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            pygame.gfxdraw.filled_polygon(Shape_T, ((0, 25), (0, 50), (75, 50), (75, 25), (50, 25), (50, 0), (25, 0), (25, 25)), Purple)
            return Shape_T

    def update(self):
        self.rect.x += self.change_x
        block_hit_list = pygame.sprite.spritecollide(self, self.walls, False)
        for block in block_hit_list:
            if self.change_x > 0:
                self.rect.right = block.rect.left
            else:
                self.rect.left = block.rect.right
        self.rect.y += self.change_y
        block_hit_list = pygame.sprite.spritecollide(self, self.walls, False)
        for block in block_hit_list:
            if self.change_y > 0:
                self.rect.bottom = block.rect.top
            else:
                self.rect.top = block.rect.bottom

    def go_left(self):
        self.change_x = -25

    def go_right(self):
        self.change_x = 25

    def go_down(self):
        self.change_y = 25

    def stop(self):
        self.change_x = 0

    def stop_fall(self):
        self.change_y = 0

    def rotate(self):
        self.width, self.height = self.height, self.width
        if self.shape == "Shape_S":
            self.image = pygame.transform.rotate(self.image, 90)
            self.rect.center = (self.rect.x + self.width/2, self.rect.y + self.height/2)
            self.rect = self.image.get_rect(center=(self.rect.center))
        elif self.shape == "Shape_Z":
            self.image = pygame.transform.rotate(self.image, 90)
            self.rect.center = (self.rect.x + self.width / 2, self.rect.y + self.height / 2)
            self.rect = self.image.get_rect(center=(self.rect.center))
        elif self.shape == "Shape_I":
            self.image = pygame.transform.rotate(self.image, 90)
            self.rect.center = (self.rect.x + self.width / 2, self.rect.y + self.height / 2)
            self.rect = self.image.get_rect(center=(self.rect.center))
        elif self.shape == "Shape_L":
            self.image = pygame.transform.rotate(self.image, 90)
            self.rect.center = (self.rect.x + self.width / 2, self.rect.y + self.height / 2)
            self.rect = self.image.get_rect(center=(self.rect.center))
        elif self.shape == "Shape_T":
            self.image = pygame.transform.rotate(self.image, 90)
            self.rect.center = (self.rect.x + self.width / 2, self.rect.y + self.height / 2)
            self.rect = self.image.get_rect(center=(self.rect.center))

    def hard_drop(self):
        self.rect.y = 551 - self.height

class Wall(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface([width, height])
        self.image.fill((0,0,0))
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

all_sprite_list = pygame.sprite.Group()
wall_list = pygame.sprite.Group()
bottom_walls = pygame.sprite.Group()

wall = Wall(75, 50, 1, 501)
wall_list.add(wall)
all_sprite_list.add(wall)

wall = Wall(75, 50, 251, 1)
wall_list.add(wall)
all_sprite_list.add(wall)

wall = Wall(326, 50, 1, 501)
wall_list.add(wall)
all_sprite_list.add(wall)

wall = Wall(75, 551, 251, 1)
wall_list.add(wall)
all_sprite_list.add(wall)
bottom_walls.add(Wall(75, 550, 251, 1))

def main():
    clock = pygame.time.Clock()
    timer = 0
    timer_check = 20
    counter = 0
    level = 1
    score = 0
    stop_rotate = 0
    harddrop = True
    block_list = pygame.sprite.Group()
    player = Player()
    player.walls = wall_list
    active_sprite_list = pygame.sprite.Group()
    player.rect.x = 176
    player.rect.y = 51
    active_sprite_list.add(player)
    done = False
    while not done:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
        if timer == timer_check:
            player.change_y = 25
            timer = 0
        else:
            player.change_y = 0
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player.change_x == 0:
            player.go_left()
        elif keys[pygame.K_RIGHT] and player.change_x == 0:
            player.go_right()
        else:
            player.stop()
        if keys[pygame.K_DOWN] or player.change_y != 0:
            player.go_down()
        else:
            player.stop_fall()
        if keys[pygame.K_UP]:
            if stop_rotate == 0:
                player.rotate()
                stop_rotate += 1
        else:
            stop_rotate = 0
        if keys[pygame.K_SPACE]:
            if harddrop:
                player.hard_drop()
                harddrop = False
        else:
            harddrop = True
        screen.fill(White)
        all_sprite_list.draw(screen)
        for i in range(51, 550, 25):
            for k in range(76, 325, 25):
                pygame.draw.rect(screen, (200,200,200), [k, i, 25, 25], 1)
        pygame.draw.rect(screen, Black, [74,49,253,503], 2)

        # ScoreBoard
        pygame.draw.rect(screen, Black, [340, 50, 150, 200], 4)
        font = pygame.font.SysFont('Calibri', 25, True, False)
        Score_title = font.render("Score", True, Black)
        screen.blit(Score_title, [350, 60])
        score_display = font.render(str(score), True, Black)
        screen.blit(score_display, [350, 80])
        level_title = font.render("Level", True, Black)
        screen.blit(level_title, [350, 120])
        level_display = font.render(str(level), True, Black)
        screen.blit(level_display, [350, 140])

        player.update()
        active_sprite_list.draw(screen)
        bottom_hit_list = pygame.sprite.spritecollide(player, bottom_walls, False)
        for i in bottom_hit_list:
            if player.rect.y <= 526:
                player = Player()
                player.walls = wall_list
                player.rect.x = 176
                player.rect.y = 51
                active_sprite_list.add(player)
                counter += 1
            if counter == 5:
                if timer_check >= 4:
                    timer_check -= 2
                    level += 1
                    counter = 0
                    timer = 0
        print(timer, timer_check)
        pygame.display.flip()
        clock.tick(20)
        timer += 1

if __name__ == "__main__":
    main()
