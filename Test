import pygame, random, sys
size = (450, 550)
screen = pygame.display.set_mode(size)

Black = (0, 0, 0)
Gray = (200,200,200)
White = (255, 255, 255)
Green = (0, 255, 0)
Red = (255, 0, 0)
Blue = (0, 0, 255)
Purple = (128, 0, 128)
Orange = (255, 165, 0)
Yellow = (255, 255, 0)
LightBlue = (0, 255, 255)

width = 10
length = 20
board = None
shape = None
shape_color = None
shape_col = 0
shape_row = 0
shape_rotate = True
level = 1
score = 0
time = 550
counter = 0

EVENT_PAINT = 25
EVENT_TIMER = 26

def new_board():
    global board
    board = [[White for i in range(width)] for k in range(length)]

Shape_Z = [[-1, 0], [0, 0], [0, 1], [1, 1]]
Shape_S = [[-1, 1], [0, 1], [0, 0], [1, 0]]
Shape_Square = [[0,1], [1,1], [1,0], [0,0]]
Shape_I = [[-1, 0], [0, 0], [1, 0], [2, 0]]
Shape_L = [[-1 ,1], [-1, 0], [0, 0], [1, 0]]
Shape_RevL = [[-1, 0], [0, 0], [1, 0], [1, 1]]
Shape_T = [[ -1, 0], [0, 0], [1, 0], [0, 1]]
shapes = [Shape_Z, Shape_S, Shape_Square, Shape_I, Shape_L, Shape_RevL, Shape_T]
colors = [Red, Green, Yellow, LightBlue, Blue, Orange, Purple]
spins = [True, True, False, True, True, True, True ]

def go_left():
    move(0, -1)
    if not valid_position():
        move(0,1)
        return False
    return True

def move(row, col):
    global shape_row, shape_col
    shape_row += row
    shape_col += col

def valid_position():
    for i, k in shape:
        row = shape_row+i
        col = shape_col+k
        if col<0 or col>=width:
            return False
        if row>=length:
            return False
        if board[row][col]!=White:
            return False
    return True

def go_right():
    move(0, 1)
    if not valid_position():
        move(0, -1)
        return False
    return True

def drop():
    t = 0
    while go_down():
        t += 1
    return t

def go_down():
    move(1, 0)
    if not valid_position():
        move(-1, 0)
        return False
    return True

def rotate():
    global shape, shape_rotate
    if shape_rotate:
        shape = [[j, -i] for i, j in shape]
        if not valid_position():
            shape = [[-j, i] for i, j in shape]
            return False
        return True
    return False

def new_game():
    global level, counter, time
    level = 1
    counter = 0
    new_shape()
    new_board()
    pygame.time.set_timer(EVENT_TIMER, time)

def start_game():
    
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                return True
        elif event.type == pygame.QUIT:
            sys.exit()

def main():
    pygame.init()
    pygame.display.set_caption("ICSTetrisCPT")
    while True:
        if start_game():
            new_game()
            while True:
                process_event()

def new_shape():
    global shape, shape_color, shape_row, shape_col, shape_rotate
    shape_row = 0
    shape_col = width//2-1
    num = random.randrange(7)
    shape = shapes[num]
    shape_color = colors[num]
    shape_rotate = spins[num]

def paint():
    screen.fill(White)
    for i, row in enumerate(board):
        for k, cell in enumerate(row):
            pygame.draw.rect(screen, cell, [k * 25, i * 25, 25, 25])
            pygame.draw.rect(screen, Gray, [k * 25, i * 25, 25, 25], 1)

    if shape:
        for i, k in shape:
            row = shape_row+i
            col = shape_col+k
            pygame.draw.rect(screen, shape_color, [col * 25, row * 25, 25, 25])
    # ScoreBoard
    pygame.draw.rect(screen, Black, [270, 50, 150, 200], 4)
    font = pygame.font.SysFont('Calibri', 25, True, False)
    Score_title = font.render("Score", True, Black)
    screen.blit(Score_title, [280, 60])
    score_display = font.render(str(score), True, Black)
    screen.blit(score_display, [280, 80])
    level_title = font.render("Level", True, Black)
    screen.blit(level_title, [280, 120])
    level_display = font.render(str(level), True, Black)
    screen.blit(level_display, [280, 140])
    pygame.display.flip()

def check_final():
    is_final = False
    for i, k in shape:
        row = shape_row + 1 + i
        col = shape_col + k
        if row == length:
            is_final = True
            break;
        if board[row][col] != White:
            is_final = True
            break;
    if is_final:
        for i, k in shape:
            row = shape_row + i
            col = shape_col + k
            board[row][col] = shape_color
        global counter, time, level
        remove_filled()
        new_shape()
        counter +=1
        if counter == 15 and time>=100:
            level += 1
            counter = 0
            time -=50
            pygame.time.set_timer(EVENT_TIMER, time)
def is_full(row):
    for i in range(width):
        if board[row][i] == White:
            return False
    return True

def is_empty(row):
    for i in range(width):
        if board[row][i] != White:
            return False
    return True

def remove_filled():
    global score
    for i in range(length-1, 0, -1):
        while is_full(i):
            score += 100
            for j in range(i, 0, -1):
                for n in range(width):
                    if (j==0):
                        board[j][n] = White
                    else:
                        board[j][n] = board[j-1][n]
        if is_empty(i):
            break

def process_event():
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key==pygame.K_LEFT:
                if go_left():
                    check_final()
                    paint()
            elif event.key==pygame.K_RIGHT:
                if go_right():
                    check_final()
                    paint()
            elif event.key==pygame.K_UP:
                if rotate():
                    check_final()
                    paint()
            elif event.key==pygame.K_DOWN:
                if go_down():
                    check_final()
                    paint()
            elif event.key==pygame.K_SPACE:
                if drop():
                    check_final()
                    paint()
        elif event.type == EVENT_PAINT:
            paint()
        elif event.type == EVENT_TIMER:
            if go_down():
                check_final()
                paint()
        elif event.type == pygame.QUIT:
            sys.exit()
if __name__ == "__main__":
   main()
